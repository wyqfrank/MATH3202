from gurobipy import *

# ID, X, Y, Fuel needed (L)
Sites = [
[0,179,259,140],
[1,45,113,241],
[2,386,125,207],
[3,43,166,366],
[4,304,76,201],
[5,302,138,209],
[6,178,158,123],
[7,146,28,293],
[8,335,37,111],
[9,321,152,131],
[10,271,31,244],
[11,280,99,131],
[12,367,283,250],
[13,17,177,154],
[14,107,237,154],
[15,187,47,317],
[16,31,284,139],
[17,188,178,67],
[18,62,69,100],
[19,323,119,122],
[20,354,225,89],
[21,166,272,203],
[22,191,145,143],
[23,292,178,225],
[24,48,254,98],
[25,264,155,242],
[26,244,65,126],
[27,144,139,143],
[28,217,152,98],
[29,368,83,130],
[30,344,27,82],
[31,290,25,118],
[32,231,203,0],
[33,300,150,98],
[34,323,53,0],
[35,33,136,192],
[36,240,188,159],
[37,329,22,122],
[38,114,140,335],
[39,96,275,0],
[40,28,40,145],
[41,25,196,184],
[42,201,22,69],
[43,86,113,0],
[44,196,33,116],
[45,269,129,88],
[46,202,201,269],
[47,164,12,192],
[48,368,227,115],
[49,215,227,212],
[50,390,84,95],
[51,284,259,112],
[52,340,288,267],
[53,315,186,159],
[54,316,23,130],
[55,149,215,91]]

# ID, Site1, Site2, Distance (km)
Roads = [
[0,12,52,31],
[1,52,12,31],
[2,20,52,82],
[3,52,20,82],
[4,13,41,24],
[5,41,13,24],
[6,2,29,59],
[7,29,2,59],
[8,29,50,24],
[9,50,29,24],
[10,2,50,52],
[11,50,2,52],
[12,19,29,68],
[13,29,19,68],
[14,2,19,79],
[15,19,2,79],
[16,12,48,69],
[17,48,12,69],
[18,20,48,17],
[19,48,20,17],
[20,13,35,44],
[21,35,13,44],
[22,1,35,32],
[23,35,1,32],
[24,1,40,93],
[25,40,1,93],
[26,21,39,72],
[27,39,21,72],
[28,16,39,83],
[29,39,16,83],
[30,1,18,57],
[31,18,1,57],
[32,18,40,56],
[33,40,18,56],
[34,11,26,53],
[35,26,11,53],
[36,11,45,32],
[37,45,11,32],
[38,20,51,80],
[39,51,20,80],
[40,51,52,80],
[41,52,51,80],
[42,51,53,95],
[43,53,51,95],
[44,20,53,71],
[45,53,20,71],
[46,30,50,90],
[47,50,30,90],
[48,5,45,41],
[49,45,5,41],
[50,5,11,55],
[51,11,5,55],
[52,5,19,30],
[53,19,5,30],
[54,11,19,61],
[55,19,11,61],
[56,5,33,16],
[57,33,5,16],
[58,4,19,57],
[59,19,4,57],
[60,4,11,39],
[61,11,4,39],
[62,4,26,71],
[63,26,4,71],
[64,3,41,38],
[65,41,3,38],
[66,3,13,34],
[67,13,3,34],
[68,3,35,34],
[69,35,3,34],
[70,18,43,53],
[71,43,18,53],
[72,1,43,43],
[73,43,1,43],
[74,38,43,48],
[75,43,38,48],
[76,3,38,95],
[77,38,3,95],
[78,27,38,34],
[79,38,27,34],
[80,7,15,52],
[81,15,7,52],
[82,7,47,30],
[83,47,7,30],
[84,22,28,28],
[85,28,22,28],
[86,27,55,82],
[87,55,27,82],
[88,26,44,62],
[89,44,26,62],
[90,42,44,15],
[91,44,42,15],
[92,15,44,20],
[93,44,15,20],
[94,44,47,43],
[95,47,44,43],
[96,0,21,23],
[97,21,0,23],
[98,0,49,56],
[99,49,0,56],
[100,49,51,80],
[101,51,49,80],
[102,0,55,66],
[103,55,0,66],
[104,32,49,37],
[105,49,32,37],
[106,32,36,18],
[107,36,32,18],
[108,25,45,29],
[109,45,25,29],
[110,25,28,48],
[111,28,25,48],
[112,25,36,46],
[113,36,25,46],
[114,28,36,49],
[115,36,28,49],
[116,25,33,44],
[117,33,25,44],
[118,9,33,26],
[119,33,9,26],
[120,9,53,36],
[121,53,9,36],
[122,33,53,50],
[123,53,33,50],
[124,9,19,33],
[125,19,9,33],
[126,5,9,26],
[127,9,5,26],
[128,8,30,14],
[129,30,8,14],
[130,8,37,18],
[131,37,8,18],
[132,30,37,16],
[133,37,30,16],
[134,10,26,44],
[135,26,10,44],
[136,10,42,91],
[137,42,10,91],
[138,17,22,38],
[139,22,17,38],
[140,17,28,49],
[141,28,17,49],
[142,14,39,51],
[143,39,14,51],
[144,14,21,89],
[145,21,14,89],
[146,14,55,61],
[147,55,14,61],
[148,23,33,33],
[149,33,23,33],
[150,23,53,28],
[151,53,23,28],
[152,23,25,38],
[153,25,23,38],
[154,23,36,60],
[155,36,23,60],
[156,10,31,25],
[157,31,10,25],
[158,4,31,56],
[159,31,4,56],
[160,6,22,22],
[161,22,6,22],
[162,6,27,44],
[163,27,6,44],
[164,6,17,26],
[165,17,6,26],
[166,17,55,54],
[167,55,17,54],
[168,17,46,30],
[169,46,17,30],
[170,46,55,71],
[171,55,46,71],
[172,46,49,34],
[173,49,46,34],
[174,32,46,34],
[175,46,32,34],
[176,28,46,64],
[177,46,28,64],
[178,24,41,70],
[179,41,24,70],
[180,16,24,44],
[181,24,16,44],
[182,14,24,76],
[183,24,14,76],
[184,24,39,65],
[185,39,24,65],
[186,31,34,47],
[187,34,31,47],
[188,4,34,37],
[189,34,4,37],
[190,29,34,69],
[191,34,29,69],
[192,8,34,25],
[193,34,8,25],
[194,34,54,35],
[195,54,34,35],
[196,31,54,30],
[197,54,31,30],
[198,37,54,16],
[199,54,37,16],
[200,8,54,30],
[201,54,8,30]]

m = Model("Brolga")

# Sets
sites = range(len(Sites))
burn_sites = [site[0] for site in Sites if site[3] > 0]
warehouses = [32, 34, 39, 43]
roads = range(len(Roads))

# Data

# Warehouse data: maximum stock and price per liter
warehouse_max_stock = {
    32: 2600,  # Warehouse A
    34: 2100,  # Warehouse B
    39: 2900,  # Warehouse C
    43: 2200   # Warehouse D
}

warehouse_price = {
    32: 8.21,  # Warehouse A
    34: 9.10,  # Warehouse B
    39: 7.79,  # Warehouse C
    43: 6.40   # Warehouse D
}

# Fuel requirements for each burn site
fuel_required = {}
for site in Sites:
    if site[3] > 0:
        fuel_required[site[0]] = site[3]

# Transport cost per liter per km
transport_cost = 0.78  # $/L/km

# Create dictionary to store road data for easier access
road_data = {}
for road_id in roads:
    _, from_site, to_site, distance = Roads[road_id]
    road_data[road_id] = {
        'from': from_site,
        'to': to_site,
        'distance': distance
    }

# Variables
x = {}
for w in warehouses:
    x[w] = m.addVar(lb=0, ub=warehouse_max_stock[w], name=f"x_{w}")

# Flow of fuel along each road
y = {}
for r in roads:
    from_site = road_data[r]['from']
    to_site = road_data[r]['to']
    y[r] = m.addVar(lb=0, name=f"y_{from_site}_{to_site}")

m.update()

# Objective
purchase_cost = quicksum(warehouse_price[w] * x[w] for w in warehouses)
transport_cost_expr = quicksum(transport_cost * road_data[r]['distance'] * y[r] for r in roads)

m.setObjective(purchase_cost + transport_cost_expr, GRB.MINIMIZE)

# Constraints
for site_id in burn_sites + warehouses:
    # Outgoing flow
    outflow = quicksum(y[r] for r in roads if road_data[r]['from'] == site_id)
    
    # Incoming flow
    inflow = quicksum(y[r] for r in roads if road_data[r]['to'] == site_id)
    
    # For warehouses: outflow - inflow = amount purchased
    if site_id in warehouses:
        m.addConstr(outflow - inflow == x[site_id], name=f"flow_balance_warehouse_{site_id}")
    
    # For burn sites: inflow - outflow = fuel required
    elif site_id in burn_sites:
        m.addConstr(inflow - outflow == fuel_required[site_id], name=f"flow_balance_burn_{site_id}")

m.optimize()
print(m.ObjVal)